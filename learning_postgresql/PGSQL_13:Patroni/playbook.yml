---
- hosts: all
  become: yes
  gather_facts: yes
  vars:
    max_clients: 200
  tasks:
    - name: Apply tags to tasks within included file
      include_tasks:
        file: include/ssh_append.yml
      when: 
        - inventory_hostname in groups['etcdservers']
        - inventory_hostname in groups['haproxyservers']
        - inventory_hostname in groups['patroniservers']

    - name: configure etcd
      block:
        - name: put etcd_installer.sh
          ansible.builtin.template:
            src: templates/etcd_installer.sh.j2
            dest: /root/etcd_installed.sh
            owner: root
            group: root
            mode: '0755'

        - name: run script etcd_installer.sh
          shell: |
            /root/etcd_installer.sh

        - name: Create etcd group
          group:
            name: "etcd"
        
        - name: Create etcd user
          user:
            name: "etcd"
            group: "etcd"
            home: /bin/false

        - name: add etcd config file
          ansible.builtin.template:
            src: templates/etcd.conf.yml.sample.j2
            dest: /etc/etcd/etcd.yml
            owner: etcd
            group: etcd
            mode: '0755'

        - name: Change kubeconfig file permission
          file:
            path: "{{ item }}"
            owner: etcd
            group: etcd
            recurse: yes
          loop:
            - "/etc/etcd"
            - "/task13/etcd"

        - name: Create etcd systemd service 
          template:
            src: templates/etcd.service.j2
            dest: /etc/systemd/system/etcd.service
            owner: root
            group: root
            mode: 0644
        
        - name: Start etcd
          service:
            name: etcd
            state: "restarted"
            enabled: True
            daemon_reload: True

        #Запустите etcd, проверьте его работоспособность и узнайте, какая нода является ведущей (является мастер-нодой), 
        #сколько members в кластере и их имена, какие из них активны. Все ноды должны быть в состоянии helthy.
      when: 
        - inventory_hostname in groups['etcdservers']

    - name: configure patroni
      block:
        - name: install 1_ubuntu
          ansible.builtin.apt:
            pkg:
            - wget
            - ca-certificates
            - vim-nox
            update_cache: yes
            state: latest
        - name: 2_ubuntu
          ansible.builtin.apt_key:
            url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
            state: present
        - name: 3_ubuntu
          ansible.builtin.apt_repository:
            repo: deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main
            filename: pgdg
            state: present
        - name: install 4_ubuntu
          become: yes
          ansible.builtin.apt:
            pkg:
            - postgresql-13
            - postgresql-client-13
            update_cache: yes
            state: latest
     
        - name: Ensure postgresql database-cluster manager package
          package:
            name:               - 
              - postgresql-common 
              - python3-pip 
              - python3-dev 
              - libpq-dev
            update_cache: yes

        - name: Install pip3 packages
          pip:
            name: 
              - setuptools
              - pip
            extra_args: --upgrade
            executable: pip3

        - name: Install pip packages
          pip:
            name: 
              - psycopg2-binary
            extra_args: --upgrade
            executable: pip

        - name: Add patroni group
          group:
            name: "patroni"
            state: present
        
        - name: Add patroni user
          user:
            name: "patroni"
            group: "patroni"
            system: yes

        - name: Restart postgresql.service
          ansible.builtin.systemd:
            state: stopped
            daemon_reload: yes
            name: "{{ item }}"
          loop:
            - postgresql.service



      when: 
        - inventory_hostname in groups['patroniservers']






    - name: add superuser root
      become_user: postgres
      shell: |
        createuser --superuser root
      args:
        executable: /usr/bin/bash
      ignore_errors: yes
    - name: create task12 DB
      become_user: postgres
      shell: |
        psql --dbname=postgres --command 'CREATE DATABASE task12;' ;
      args:
        executable: /usr/bin/bash
      ignore_errors: yes
    - name: create table
      shell: "psql -U root --dbname=task12 --command '\n  CREATE TABLE pgsql(\n    id INT PRIMARY KEY, \n    name TEXT NOT NULL\n  );'\npsql -U root --dbname=task12 --command '\n  INSERT INTO pgsql SELECT n, md5 (random()::text) \n    FROM generate_series (1, 100000) AS foo(n);'\npsql -U root --dbname=task12 --command '\n  EXPLAIN SELECT * FROM pgsql;\n' | tail -n3 |head -n1 | cut -d ' ' -f7- | tr -d '(\\|)' > /opt/cost_preview.txt\npsql -U root --dbname=task12 --command '\n  EXPLAIN SELECT * FROM pgsql;\n' \npsql -U root --dbname=task12 --command '\n  EXPLAIN SELECT * FROM pgsql;\n' | tail -n3 |head -n1 | cut -d ' ' -f7- | tr -d '(\\|)' > /opt/cost.txt\n"
      args:
        executable: /usr/bin/bash
      ignore_errors: yes
      #В выводе EXPLAIN найдите и сохраните в файл /opt/cost_preview.txt стоимость выборки первой строки, стоимость выборки всех строк, количество рядов (rows), а также среднею ширину кортежа в байтах. В формате: cost=*.**..****.** rows=****** width=**
    - name: analyze data #2
      shell: |
        psql -U root --dbname=task12 --command '
          EXPLAIN ANALYZE SELECT * FROM pgsql WHERE id >= 10 and id < 20;' > /opt/explain_cost.txt
      args:
        executable: /usr/bin/bash
      ignore_errors: yes
    - name: explain data #3
      shell: |
        psql -U root --dbname=task12 --command '
          EXPLAIN SELECT * FROM pgsql WHERE upper(id::text)::int < 20;' > /opt/expression.txt
      args:
        executable: /usr/bin/bash
      ignore_errors: yes
    - name: create table success_practice
      shell: "psql -U root --dbname=task12 --command '\n  CREATE TABLE success_practice (\n    id int, description text,\n    pgsql_id int references pgsql(id));'\npsql -U root --dbname=task12 --command '\n  INSERT INTO success_practice (id, description, pgsql_id) \n    SELECT n, \n           md5(n::text), \n           random()*99999+1\n    FROM generate_series(1,200000) AS foo(n);'\npsql -U root --dbname=task12 --command '\n  EXPLAIN ANALYZE \n    SELECT * FROM pgsql inner JOIN success_practice on pgsql.id = success_practice.pgsql_id WHERE pgsql_id = 1000;' > /opt/execution_without_index.txt \n"
      args:
        executable: /usr/bin/bash
      ignore_errors: yes
    - name: create index for table success_practice
      shell: "psql -U root --dbname=task12 --command '\n  CREATE index on success_practice (pgsql_id)\n  '\npsql -U root --dbname=task12 --command '\n  EXPLAIN ANALYZE \n    SELECT * FROM pgsql inner JOIN success_practice on pgsql.id = success_practice.pgsql_id WHERE pgsql_id = 1000;' > /opt/execution_with_index.txt  #(Execution Time) в файл /opt/execution_without_index.txt \n"
      args:
        executable: /usr/bin/bash
      ignore_errors: yes
    - name: get result files from remote server #1
      ansible.builtin.fetch:
        src: "/opt/{{ item }}"
        dest: "files/{{ item }}"
        flat: yes
      loop:
        - "explain_cost.txt"
        - "cost_preview.txt"
        - "cost.txt"
        - "expression.txt"
        - "execution_without_index.txt"
        - "execution_with_index.txt"

#  - name: get result files from remote server #2
#    ansible.builtin.fetch:
#      src: "/tmp/{{ item }}"
#      dest: "files/{{ item }}"
#      flat: yes
#    loop:
#      - "EXPLAIN_1.txt"
#
