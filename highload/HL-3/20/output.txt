Задание:
Подготовка окружения
1. Создайте ВМ rabbitmq-docker со следующими параметрами:
○ 1 CPU
○ 2 GB memory
Обновите систему на созданных ВМ.
Установите пакеты docker и docker-compose.
2. Создайте файл docker-compose.yml следующего содержания:

```
mkdir prometheus
cat << EOF > ./10-defaults.conf
## DEFAULT SETTINGS ARE NOT MEANT TO BE TAKEN STRAIGHT INTO PRODUCTION
## see https://www.rabbitmq.com/configure.html for further information
## on configuring RabbitMQ

## allow access to the guest user from anywhere on the network
## https://www.rabbitmq.com/access-control.html#loopback-users
## https://www.rabbitmq.com/production-checklist.html#users
loopback_users.guest = false

## Send all logs to stdout/TTY. Necessary to see logs when running via
## a container
log.console = true
management.rates_mode = detailed
EOF

cat << EOF > ./prometheus/prometheus.yml
global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.
  external_labels:
    monitor: 'codelab-monitor'
scrape_configs:
- job_name: rabbitmq
  scrape_interval: 1s
  static_configs:
  - targets:
    - 192.168.56.100:15692
- job_name: kafak
  scrape_interval: 1s
  static_configs:
  - targets:
    - 192.168.56.100:9308
EOF

cat << EOF > ./prometheus/rules.yml
groups:
- name: more than 100 messages in queue
  rules:
  - alert: HighNumberOfMessagesInQueue
    expr: rabbitmq_queue_messages{instance="192.168.56.100:15692",job="rabbitmq"} > 100
    for: 1m
    labels:
      severity: critical
    annotations:
      summary: High number of messages in queue
- name: more than 5 messages per second
  rules:
  - alert: HighMessageRate
    expr: rate(rabbitmq_queue_messages[5s]) > 25
    for: 1m
    labels:
      severity: critical
    annotations:
      summary: High message rate
EOF


cat << EOF > docker-compose.yml
version: '3'
services:
  rabbitmq:
    image: rabbitmq
    volumes:
      - ./enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./10-defaults.conf:/etc/rabbitmq/conf.d/10-defaults.conf
    ports:
      - 4369:4369
      - 5671:5671
      - 5672:5672
      - 15672:15672
      - 15692:15692
      - 25672:25672
  prometheus:
    image: prom/prometheus:v2.1.0
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    restart: always
  alertmanager:
    image: prom/alertmanager:v0.22.0
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    deploy:
      mode: global
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
      - "9038:9038"
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
volumes:
  prometheus_data: {}
EOF
```

3. Создайте файл enabled_plugins следующего содержания:

```
echo '[rabbitmq_management,rabbitmq_prometheus].' > ./enabled_plugins
```

4. Запустите контейнер RabbitMQ.
RabbitMQ Managenent UI

```
docker-compose up -d
```

5. В контейнере RabbitMQ:
○ Cоздайте пользователя admin с паролем admin
○ Дайте пользователю admin полные права на vhost / и тэг administrator
○ Создайте тестовую очередь

```
docker exec -ti root_rabbitmq_1 rabbitmqctl add_user admin admin
docker exec -ti root_rabbitmq_1 rabbitmqctl set_user_tags admin administrator
docker exec -ti root_rabbitmq_1 rabbitmqctl set_permissions --vhost "/" admin ".*" ".*" ".*"

wget -O rabbitmqadmin https://raw.githubusercontent.com/rabbitmq/rabbitmq-server/v3.10.4/deps/rabbitmq_management/bin/rabbitmqadmin
chmod +x rabbitmqadmin
mv rabbitmqadmin /usr/local/bin
chmod 777 /usr/local/bin/rabbitmqadmin
/usr/local/bin/rabbitmqadmin declare queue --vhost='/' name=rabbitioQueue durable=true
```

6. Откройте в браузере адрес Management UI. Выполните авторизацию пользователем admin.

```
1.png
```

###RabbitMQ and Prometheus
7. Убедитесь, что RabbitMQ возвращает метрики.

```
root@cpu1:~# curl localhost:15692/metrics  | head
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0# TYPE erlang_mnesia_held_locks gauge
# HELP erlang_mnesia_held_locks Number of held locks.
erlang_mnesia_held_locks 0
# TYPE erlang_mnesia_lock_queue gauge
# HELP erlang_mnesia_lock_queue Number of transactions waiting for a lock.
erlang_mnesia_lock_queue 0
# TYPE erlang_mnesia_transaction_participants gauge
# HELP erlang_mnesia_transaction_participants Number of participant transactions.
erlang_mnesia_transaction_participants 0
# TYPE erlang_mnesia_transaction_coordinators gauge
...
```

8. Добавьте в конфигурацию Prometheus target rabbitmq.
9. Используя Prometheus UI:
○ Проверьте состояние target rabbitmq
○ Сделайте запрос метрики очередей Kafka and Prometheus

```
2.png
```

10. Скачайте Kafka Exporter в директорию /usr/local/kafka/bin ВМ kafka-broker1.

```
docker exec -ti kafka mkdir -p /usr/local/kafka/bin
docker exec -ti kafka wget https://github.com/danielqsj/kafka_exporter/releases/download/v1.4.2/kafka_exporter-1.4.2.linux-amd64.tar.gz -O /tmp/kafka_exporter-1.4.2.linux-amd64.tar.gz
docker exec -ti kafka tar xvf /tmp/kafka_exporter-1.4.2.linux-amd64.tar.gz
docker exec -ti kafka mv /kafka_exporter-1.4.2.linux-amd64/kafka_exporter /usr/local/kafka/bin/kafka_exporter
docker exec -ti kafka /usr/local/kafka/bin/kafka_exporter --kafka.server=localhost:9092
```

11. Создайте unit-файл для запуска Kafka Exporter:

```
[Service]
Type=simple
ExecStart=/usr/local/kafka/bin/kafka_exporter --kafka.server=localhost:9092
Restart=on-abnormal
[Install]
WantedBy=multi-user.target
```
Стартуйте сервис kafka-exporter.
12. Убедитесь, что Kafka Exporter возвращает метрики.
13. В файл конфигурации Prometheus добавьте target kafka.
14. Используя Prometheus UI:
○ Проверьте состояние target kafka
○ Сделайте запрос колчиества нод в кластере Kafka

```
3.png
4.png
```

### Алерты
15. Нагрузите очередь сообщениями без потребителя. Выведите в Telegram или Slack оповещение о том, что очередь выросла и не обрабатывается

```
cat << EOF > /root/send.py
#!/usr/bin/env python3
import pika
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()
channel.queue_declare(queue='rabbitioQueue',durable='true')
channel.basic_publish(exchange='', routing_key='rabbitioQueue', body='Hello World!')
print(" [x] Sent 'Hello World!'")
connection.close()
EOF

count=100
for i in $(seq $count); do
    python3 /root/send.py
done
```

16. Факторы наблюдения: более 100 сообщений в очереди, более 5 сообщений в секунду поступает в очередь

```
cat ./prometheus/rules.yml
mkdir ./alertmanager

cat << EOF > ./alertmanager/alertmanager.yml
# alertmanager.yml

global:
  http_config:
    tls_config:
      insecure_skip_verify: true

# catch-all route to receive and handle all incoming alerts
route:
  group_by: ['alertname']
  group_wait: 10s       # wait up to 10s for more alerts to group them
  receiver: 'telepush'  # see below

# telepush configuration here
receivers:
- name: 'telepush'
  webhook_configs:
  - url: 'https://telepush.dev/api/inlets/alertmanager/acc70f'    # add your Telepush token here
  http_config:
    tls_config:
      insecure_skip_verify: true
EOF
docker-compose restart prometheus
docker-compose restart alertmanager

5.png
```

