Задание:

1. Установите PostgreSQL v13 на предоставленной VM c OS Ubuntu 20.04.
2. Добавьте в PostgreSQL пользователя root c правами SUPERUSER.
3. Подключитесь к PostgreSQL пользователем root.
4. Создайте базу данных "rebrain_courses_db".
5. Для работы с базой данных создайте пользователя "rebrain_admin".
6. Выдайте все права пользователю "rebrain_admin" на базу данных "rebrain_courses_db" (в том числе CONNECT).
7. Скачайте и установите prometheus-server, проверьте доступность сервиса (systemctl), посмотрите, открыт ли порт TCP/9090 (ss, netstat). Также настройте сбор данных о самом сервере (job_name: 'prometheus').
8. Скачайте и установите в режиме сервиса последнюю версию node_exporter для OS Ubuntu 20.04 Focal, проверьте доступность сервиса (systemctl), посмотрите, открыт ли порт TCP/9100 (ss, netstat).
9. Настройте новый источник данных для prometheus-server, подключите сбор данных с node_exporter (job_name: 'node_exporter').
10. Скачайте последнюю версию Grafana для OS Ubuntu 20.04 Focal, установите ее в режиме сервиса, проверьте доступность сервиса (systemctl), посмотрите, открыт ли порт TCP/3000 (ss, netstat).
11. Подключите к Grafana сервер prometheus в качесчтве источника данных для панелей мониторинга.
12. Скачайте и импортируйте Dashboard 1860 для node_exporter. Выберите в качестве источника данных prometheus сервер.
13. Проверьте работоспособность node_exporter воспользовавшись импортированной панелью мониторинга 1860. Все метрики должны быть видны на графиках и в полях значений.
14. Скачайте и установите в качестве сервиса самую свежую версию postgres_exporter (можно сразу ставить через apt install prometheus-postgres-exporter), проверьте доступность сервиса (systemctl), посмотрите, открыт ли порт TCP/9187 (ss, netstat). Подключите сбор данных с prometheus-postgres-exporter (job_name: 'postgres_exporter').
15. Добавьте в PostgreSQL пользователя rebrain_monitoring c правами SUPERUSER.
16. Настройте окружение для postgres_exporter так, чтобы работало подключение к PostgreSQL к базе данных rebrain_courses_db с правами rebrain_monitoring. Для этого используйте файл "/etc/default/prometheus-postgres-exporter", в него в одну строку внесите данные о подключении (DATA_SOURCE_NAME).
17. Скачайте и импортируйте Dashboard 9628 для postgres_exporter и мониторинга PostgreSQL. Выберите в качестве источника данных prometheus-server.
18. Проверьте работоспособность postgres_exporter воспользовавшись импортированной панелью мониторинга 9628. Все метрики должны быть видны на графиках и в полях значений.



19. Проинициализируйте pgbench для базы данных rebrain_courses_db для пользователя rebrain_monitoring (если это необходимо, поставьте пакет postgresql-client-common).
20. Установите pgbouncer в качестве сервиса, проверьте доступность сервиса (systemctl), посмотрите, открыт ли порт TCP/6432 (ss, netstat). Настройте pgbouncer так, чтобы:

```
pgbouncer мог подключаться к базе данных "rebrain_courses_db" с именем пользователя "rebrain_monitoring"
pgbouncer слушал порт 6432
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt
pool_mode = transaction
настройка размера пула входных конектов на pgbouncer был выставлена так: max_client_conn = 1000
размер пула подключений к PostgreSQL был равен: default_pool_size = 30
```

21. Проинициализируйте pgbench для базы данных rebrain_courses_db. Проведите первый нагрузочный тест с помощью pgbench без pgbouncer (порт 5432, 900 конкурентных клиентов в 5 потоков, 180 секунд). Метрики для PostgreSQL будут изменяться с течением времени.
22. Теперь проведите второй нагрузочный тест с помощью pgbench с использованием pgbouncer в качестве пуллера(менеджера) соединений (порт 6432, 900 конкурентных клиентов в 5 потоков, 180 секунд). Метрики для PostgreSQL будут снова изменяться с течением времени. Обратите внимание на количество коннектов.
23. Проанализируйте графики на обеих панелях мониторинга, убедитесть, что нагрузочные тесты проведены успешно. Согласно графиков, вы должны были увидеть, что с включенным в тракт pgbouncer наблюдается уменьшение нагрузки на CPU, при этотм количество коннектов не превосходит значения, указаного в настройках pgbouncer (default_pool_size), а количесво верно обработанных транзакций в секунду выросло в несколько раз. 
24. Если уверены, что все сделали правильно, сдавайте задание на проверку. 


```
root@PostgreSQL-Ubuntu20:~# export PGPASSWORD=password && pgbench --username rebrain_monitoring --host=127.0.0.1 --port 5432 --client=900 --jobs=5 --time=180 rebrain_courses_db #without
starting vacuum...end.
pgbench: error: connection to database "rebrain_courses_db" failed: connection to server at "127.0.0.1", port 5432 failed: FATAL:  sorry, too many clients already
connection to server at "127.0.0.1", port 5432 failed: FATAL:  sorry, too many clients already
pgbench: error: connection to database "rebrain_courses_db" failed: connection to server at "127.0.0.1", port 5432 failed: FATAL:  sorry, too many clients already
connection to server at "127.0.0.1", port 5432 failed: FATAL:  sorry, too many clients already
pgbench: error: connection to database "rebrain_courses_db" failed: connection to server at "127.0.0.1", port 5432 failed: FATAL:  sorry, too many clients already
connection to server at "127.0.0.1", port 5432 failed: FATAL:  sorry, too many clients already
pgbench: error: connection to database "rebrain_courses_db" failed: connection to server at "127.0.0.1", port 5432 failed: FATAL:  sorry, too many clients already
connection to server at "127.0.0.1", port 5432 failed: FATAL:  sorry, too many clients already
pgbench: error: connection to database "rebrain_courses_db" failed: connection to server at "127.0.0.1", port 5432 failed: FATAL:  sorry, too many clients already
connection to server at "127.0.0.1", port 5432 failed: FATAL:  sorry, too many clients already
transaction type: <builtin: TPC-B (sort of)>
scaling factor: 1
query mode: simple
number of clients: 900
number of threads: 5
duration: 180 s
number of transactions actually processed: 0
pgbench: fatal: Run was aborted; the above results are incomplete.
root@PostgreSQL-Ubuntu20:~# export PGPASSWORD=password && pgbench --username rebrain_monitoring --host=127.0.0.1 --port 6432 --client=900 --jobs=5 --time=180 rebrain_courses_db #without
starting vacuum...end.
transaction type: <builtin: TPC-B (sort of)>
scaling factor: 1
query mode: simple
number of clients: 900
number of threads: 5
duration: 180 s
number of transactions actually processed: 70149
latency average = 2339.953 ms
tps = 384.623079 (including connections establishing)
tps = 384.628743 (excluding connections establishing)
root@PostgreSQL-Ubuntu20:~#
```
