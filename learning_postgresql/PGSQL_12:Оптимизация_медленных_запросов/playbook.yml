- hosts: all
  become: yes
  gather_facts: yes
  vars:
    max_clients: 200
  tasks:
  - name: Apply tags to tasks within included file
    include_tasks:
      file: include/ssh_append.yml


  - name: Install Postgres CentOS 7
    block:
      - name: Disable SELinux
        selinux:
          state: disabled
      - name: install postgres & pgbench
        shell: |
          yum -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
          yum -y install postgresql13 postgresql13-server postgresql13-contrib vim
          cp /usr/pgsql-13/bin/pgbench /usr/bin/
          chmod -R 777 /opt/
          /usr/pgsql-13/bin/postgresql-13-setup initdb
          systemctl start postgresql-13
          touch /var/log/postgresql.log
          chmod a-wr,u+wr /var/log/postgresql.log
          chown postgres:postgres /var/log/postgresql.log

  - name: add superuser root
    become_user: postgres
    shell: |
      createuser --superuser root
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: create task12 DB
    become_user: postgres
    shell: |
      psql --dbname=postgres --command 'CREATE DATABASE task12;' ;
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: create table
    shell: |
      psql -U root --dbname=task12 --command '
        CREATE TABLE pgsql(
          id INT PRIMARY KEY, 
          name TEXT NOT NULL
        );'
      psql -U root --dbname=task12 --command '
        INSERT INTO pgsql SELECT n, md5 (random()::text) 
          FROM generate_series (1, 100000) AS foo(n);'
      psql -U root --dbname=task12 --command '
        EXPLAIN SELECT * FROM pgsql;
      ' | tail -n3 |head -n1 | cut -d ' ' -f7- | tr -d '(\|)' > /opt/cost_preview.txt
      psql -U root --dbname=task12 --command '
        EXPLAIN SELECT * FROM pgsql;
      ' 
      psql -U root --dbname=task12 --command '
        EXPLAIN SELECT * FROM pgsql;
      ' | tail -n3 |head -n1 | cut -d ' ' -f7- | tr -d '(\|)' > /opt/cost.txt
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

#В выводе EXPLAIN найдите и сохраните в файл /opt/cost_preview.txt стоимость выборки первой строки, стоимость выборки всех строк, количество рядов (rows), а также среднею ширину кортежа в байтах. В формате: cost=*.**..****.** rows=****** width=**

  - name: analyze data #2
    shell: |
      psql -U root --dbname=task12 --command '
        EXPLAIN ANALYZE SELECT * FROM pgsql WHERE id >= 10 and id < 20;' > /opt/explain_cost.txt
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: explain data #3
    shell: |
      psql -U root --dbname=task12 --command '
        EXPLAIN SELECT * FROM pgsql WHERE upper(id::text)::int < 20;' > /opt/expression.txt
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: create table success_practice
    shell: |
      psql -U root --dbname=task12 --command '
        CREATE TABLE success_practice (
          id int, description text,
          pgsql_id int references pgsql(id));'
      psql -U root --dbname=task12 --command '
        INSERT INTO success_practice (id, description, pgsql_id) 
          SELECT n, 
                 md5(n::text), 
                 random()*99999+1
          FROM generate_series(1,200000) AS foo(n);'
      psql -U root --dbname=task12 --command '
        EXPLAIN ANALYZE 
          SELECT * FROM pgsql inner JOIN success_practice on pgsql.id = success_practice.pgsql_id WHERE pgsql_id = 1000;' > /opt/execution_without_index.txt 
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: create index for table success_practice
    shell: |
      psql -U root --dbname=task12 --command '
        CREATE index on success_practice (pgsql_id)
        '
      psql -U root --dbname=task12 --command '
        EXPLAIN ANALYZE 
          SELECT * FROM pgsql inner JOIN success_practice on pgsql.id = success_practice.pgsql_id WHERE pgsql_id = 1000;' > /opt/execution_with_index.txt  #(Execution Time) в файл /opt/execution_without_index.txt 
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: get result files from remote server #1
    ansible.builtin.fetch:
      src: "/opt/{{ item }}"
      dest: "files/{{ item }}"
      flat: yes
    loop:
      - "explain_cost.txt"
      - "cost_preview.txt"
      - "cost.txt"
      - "expression.txt"
      - "execution_without_index.txt"
      - "execution_with_index.txt"

#  - name: get result files from remote server #2
#    ansible.builtin.fetch:
#      src: "/tmp/{{ item }}"
#      dest: "files/{{ item }}"
#      flat: yes
#    loop:
#      - "EXPLAIN_1.txt"
#
