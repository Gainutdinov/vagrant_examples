- hosts: all
  become: yes
  gather_facts: yes
  vars:
    max_clients: 200
    backup_IP: "{{ hostvars['backup'].ansible_host }}"
    my_AWS_ACCESS_KEY_ID       : "{{ hostvars['backup'].my_AWS_ACCESS_KEY_ID     }}"
    my_AWS_SECRET_ACCESS_KEY   : "{{ hostvars['backup'].my_AWS_SECRET_ACCESS_KEY }}"
    my_WALE_S3_PREFIX          : "{{ hostvars['backup'].my_WALE_S3_PREFIX        }}"
    my_AWS_REGION              : "{{ hostvars['backup'].my_AWS_REGION            }}"
  tasks:
  - name: Apply tags to tasks within included file
    include_tasks:
      file: include/ssh_append.yml
  - name: Install Postgres CentOS 7
    block:
      - name: Disable SELinux
        selinux:
          state: disabled
      - name: install postgres
        shell: |
          yum -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
          yum -y install postgresql13 postgresql13-server vim
          /usr/pgsql-13/bin/postgresql-13-setup initdb
          systemctl start postgresql-13
          touch /var/log/postgresql.log
          chmod a-wr,u+wr /var/log/postgresql.log
          chown postgres:postgres /var/log/postgresql.log


  - name: configure archive_mode to on
    ansible.builtin.lineinfile:
      path: "/var/lib/pgsql/13/data/postgresql.conf"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    loop:
      - { regexp: "^#wal_level = replica",  line: "wal_level = replica       # minimal, replica, or logical"                                                  }
      - { regexp: "^#archive_mode = off",   line: "archive_mode = 'on'       # enables archiving; off, on, or always"                                         }
      - { regexp: "^#archive_command = ''", line: "archive_command = 'envdir /etc/wal-e/env wal-e wal-push %p'  # command to use to archive a logfile segment"}
      - { regexp: "^#archive_timeout = 0",  line: "archive_timeout = '60' # force a logfile segment switch after this"                                        }

  - name: restart postgres
    shell: |
      systemctl restart postgresql-13.service

  - name: restore data for postgres
    become: yes
    become_user: postgres
    shell: |
      psql --username postgres -f /opt/schema.sql
      psql --username postgres -f /opt/data.sql

  - name: install tools for backup
    shell: |
      yum install -y epel-release-latest-7.noarch.rpm 
      yum install -y epel-release 
      yum -y install pv
      yum -y install python3 python36 python36-devel pip3 lzop pv python36-setuptools
      easy_install-3.6 pip
      alias pip=pip3
      pip install https://github.com/wal-e/wal-e/archive/v1.1.1.tar.gz
      yum install gcc -y
      pip3 install wal-e envdir boto
      python3 -c 'import boto; print(boto.__path__[0])' | xargs -I{} sudo chmod -R a+rx {}
      mkdir -m 0750 -p /etc/wal-e/env
      chgrp -R postgres /etc/wal-e
      # значения переменных для каждого пользователя индивидуальные в инфраструктуре
      echo "{{ my_AWS_ACCESS_KEY_ID }}"     > "/etc/wal-e/env/AWS_ACCESS_KEY_ID"
      echo "{{ my_AWS_SECRET_ACCESS_KEY }}" > "/etc/wal-e/env/AWS_SECRET_ACCESS_KEY"
      echo "s3://{{ my_WALE_S3_PREFIX }}"        > "/etc/wal-e/env/WALE_S3_PREFIX"
      echo "{{ my_AWS_REGION }}"            > "/etc/wal-e/env/AWS_REGION"
      chgrp postgres /etc/wal-e/env/*

  - name: check wal-e
    become: yes
    become_user: postgres
    shell: |
      /usr/local/bin/envdir /etc/wal-e/env /usr/local/bin/wal-e backup-list > /tmp/file




