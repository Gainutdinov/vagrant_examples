---

####    Сгенерируйте самоподписанный сертификат для домена test.linux.example.com при помощи утилиты openssl с использованием параметра -subj (сохраните команду и сертификат).
####    Установите certbot (сохраните команды для установки).
####    Получите сертификат для вашего доменного имени при помощи webroot через nginx, используя директорию /var/www/html как корень (сохраните команды запуска).
####    Настройте автоматическое обновление сертификата и применения его на стороне nginx при помощи hook (сохраните команды).
####    Дополните конфигурационный файл nginx на использование TLS.
####    Добавить правило для автоматичесого редиректа на HTTPS в default конфиге.
####    Предоставить команды, конфигурационные файлы nginx, сертификат (полученный в п.3 Задания) и ссылку на сайт.


- hosts: server1
  become: true
  vars:
    - server_hostname: test.linux.example.com
    - key_size: 4096
    - passphrase: # Set if you want passphrase
    - key_type: RSA # Others include DSA, ECC, Ed25519, Ed448, X25519, X448
    - country_name: RU
    - email_address: admin@mail.ru
    - organization_name: rebrainme
  tasks:
  - name: Установите пакет nginx-full,apache2-utils,python3-pip.
    apt:
      pkg: 
      - nginx-full
      - vim-nox
      - certbot
      update_cache: yes

  - name: Genearte self-singed certificates for 'test.linux.example.com' domain
    shell: openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout privateKey.key -out certificate.crt -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=test.linux.example.com"
    args:
      executable: /bin/bash
      chdir: /etc/nginx

  - name: Create a directory if it does not exist
    file:
      path: /var/www/acme
      state: directory
      mode: '0777'

  - name: Template a file to /etc/nginx/sites-enabled/acme
    template:
      src: templates/acme.j2
      dest: /etc/nginx/sites-enabled/acme
      owner: root
      group: root
      mode: '0644'

  - name: Restart service nginx, in all cases
    service:
      name: nginx
      state: restarted

  - name: Get certificates from Let's encrypt
    shell: |
      certbot certonly --register-unsafely-without-email --non-interactive --agree-tos --webroot --webroot-path /var/www/acme/ --domain {{ ansible_host }}.nip.io
    args:
      executable: /bin/bash
      chdir: /root
    register: current_version
    failed_when: "current_version.rc != 0"

  - name: Add post-hook (nginx restart) for certbot
    copy:
      src: files/nginx_restart.sh
      dest: /etc/letsencrypt/renewal-hooks/post/nginx_restart.sh
      owner: root
      group: root
      mode: '0777'

  - name: Creates a cron for cronjob
    cron:
      name: certbot renew
      minute: "1"
      hour: "1"
      day: "*/1"
      month: "*"
      weekday: "*"
      user: root
      job: "certbot renew"
  

#### - Obtain a new certificate via webroot authorization, but do not install it automatically:
####   sudo certbot certonly --webroot --webroot-path {{path/to/webroot}} --domain {{subdomain.example.com}}  
####  
####  tasks:
####    - name: Generate an OpenSSL private key
####      openssl_privatekey:
####        path: "./certificates/{{ server_hostname }}_privkey.pem"
####        size: "{{ key_size }}"
####        type: "{{ key_type }}"
####        backup: yes
####    - name: Generate an OpenSSL Certificate Signing Request with Subject information
####      openssl_csr:
####        path: "./certificates/{{ server_hostname }}.csr"
####        privatekey_path: "./certificates/{{ server_hostname }}_privkey.pem"
####        country_name: "{{ country_name }}"
####        organization_name: "{{ organization_name }}"
####        email_address: "{{ email_address }}"
####        common_name: "{{ server_hostname }}"
####    - name: Generate a Self Signed OpenSSL certificate
####      openssl_certificate:
####        path: "./certificates/{{ server_hostname }}_cert.pem"
####        privatekey_path: "./certificates/{{ server_hostname }}_privkey.pem"
####        csr_path: "./certificates/{{ server_hostname }}.csr"
####        provider: selfsigned
####
