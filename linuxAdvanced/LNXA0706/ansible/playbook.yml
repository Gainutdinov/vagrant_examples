---
- hosts: server1
  become: yes
  vars:
    wireguard_port: "5888"
    wireguard_path: "/etc/wireguard"
    wireguard_sources_path: "/var/cache"
    wireguard_network_name: "private"
    debian_enable_backports: true
    debian_pin_packages: true
    client_vpn_ip: "10.1.0.100/8"
    client_wireguard_path: "~/wg.conf"
    client_wireguard_dns: false
    wireguard_additional_peers: false
    wireguard_post_up: false
    wireguard_post_down: false
  tasks:
  - name: ensure packages is installed 
    apt:
      pkg:
      - vim
      - apt-transport-https
      - wget
      - gnupg2
      - wireguard
      - curl
      - unzip
      - qrencode
      - gnutls-bin
      - software-properties-common
      update_cache: yes
      state: latest
  
  - ansible.posix.sysctl:
      name: net.ipv4.ip_forward
      value: '1'
      sysctl_set: yes
      state: present
      reload: yes

#  - name: print all facts
#    ansible.builtin.debug:
#      var: ansible_facts
   
  - name: Installing tinc package
    apt:
      pkg: tinc
      update_cache: yes
      state: latest

  - name: Ensure wireguard_path exists as directory
    file:
      path: "{{ wireguard_path }}"
      state: directory
  
  - name: Generate wireguard keys
    shell: set -o pipefail && \
           umask 077; wg genkey | tee {{ wireguard_path  }}/privatekey | wg pubkey > {{ wireguard_path }}/publickey
    args:
      executable: /bin/bash

  - name: Read private key
    slurp:
      path: "{{ wireguard_path }}/privatekey"
    register: private_key_server
  
  - name: Read public key
    slurp:
      path: "{{ wireguard_path }}/publickey"
    register: public_key_server

  
  - name: Generate wireguard client's keys
    shell: set -o pipefail && \
           umask 077; wg genkey | tee {{ wireguard_path  }}/client_privatekey | wg pubkey > {{ wireguard_path }}/client_publickey
    run_once: true
    args:
      executable: /bin/bash
  
  - name: Read private client's key
    slurp:
      src: "{{ wireguard_path }}/client_privatekey"
    register: private_key_client
    run_once: true
  
  - name: Read public client's key
    slurp:
      src: "{{ wireguard_path }}/client_publickey"
    register: public_key_client
    run_once: true

  - name: Generate config server
    template:
      src: templates/wg0.conf.j2
      dest: "{{ wireguard_path }}/wg0.conf"
      owner: root
      group: root
      mode: "u=rw,g=r,o="
      force: true
    register: config
    notify:
      - Enable wg-quick service
      - Restart wg-quick service

  - name: Generate config client
    template:
      src: templates/client.conf.j2
      dest: "{{ wireguard_path }}/client.conf"
      owner: root
      group: root
      mode: "u=rw,g=r,o="
      force: true
    register: config
    notify:
      - Enable wg-quick service
      - Restart wg-quick service

  - name: generate qr code
    shell: qrencode -t png -o wireguard_vpn.png -r client.conf
    args:
      executable: /bin/bash
      chdir: /etc/wireguard

  - name: Copy file with owner and permissions
    ansible.builtin.fetch:
      src: /etc/wireguard/wireguard_vpn.png
      dest: /tmp/wireguard_vpn.png
      owner: mgaynutdinov
      group: mgaynutdinov
      mode: '0644'
  

#private_key_server
#public_key_client
  
#  - name: Generate configs
#    template:
#      src: templates/interface.conf.j2
#      dest: "{{ wireguard_path }}/{{ wireguard_network_name }}.conf"
#      owner: root
#      group: root
#      mode: "u=rw,g=r,o="
#    register: config
#    notify:
#      - Enable wg-quick service
#      - Restart wg-quick service
#  


  handlers:
  - name: Enable wg-quick service
    service:
      name: "wg-quick@wg0"
      enabled: yes
  
  - name: Restart wg-quick service
    service:
      name: "wg-quick@wg0"
      state: restarted
    when: config.changed
  
