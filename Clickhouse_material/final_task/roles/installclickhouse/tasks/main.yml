---
- hosts: server1,server2,server3,server4
  tasks:
  - name: Update apt
    apt: update_cache=yes
  
  - name: Add the APT Key for ClickHouse.
    apt_key:
      keyserver: hkp://keyserver.ubuntu.com:80
      id: E0C56BD4
      state: present
    become: true
  
  - name: add clickhouse repo
    ansible.builtin.apt_repository:
      repo: deb https://repo.clickhouse.com/deb/stable/ main/
      state: present
      filename: clickhouse.list
  
  - name: Install Clickhouse Packages
    apt: name={{ item }} state=latest
    loop:
      - 'clickhouse-server'
      - 'clickhouse-client'
  
  - name: Restart service clickhouse service 
    ansible.builtin.systemd:
      state: restarted
      daemon_reload: yes
      name: clickhouse-server
       
  hosts: server1,server2,server3

  tasks:
  - name: Install Java Package
    apt: name=default-jre-headless state=latest
  
  - name: Add the user 'zookeeper' with a bash shell
    ansible.builtin.user:
      name: zookeeper
      append: yes
      system: yes
      create_home: no

  - name: Create /opt/zookeeper directory
    file:
      path: /opt/zookeeper
      state: directory
      mode: 0755
      owner: zookeeper
      group: zookeeper
  
  - name: Download zookeeper
    get_url: url=https://apache.volia.net/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz dest=/tmp/apache-zookeeper-3.6.3-bin.tar.gz

  - name: Download, install zookeeper, remove redundant files
    changed_when: no
    shell: |
      cd /opt/zookeeper && \
      wget https://apache.volia.net/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz && \
      tar xzfv apache-zookeeper-3.6.3-bin.tar.gz && \
      mv apache-zookeeper-3.6.3-bin/* ./ && \
      rm -rf apache-zookeeper-3.6.3-bin apache-zookeeper-3.6.3-bin.tar.gz 
  
  - name: Create zookeeper file 
    changed_when: no
    shell: |
      cat << EOF > /opt/zookeeper/conf/zoo.cfg
      tickTime=2000
      dataDir=/var/lib/zookeeper
      clientPort=2181
      EOF
  
  - name: Change owner for /opt/zookeeper
    ansible.builtin.file:
      path: /opt/zookeeper
      recurse: yes
      mode:  0644
      owner: zookeeper
      group: zookeeper

  - name: zookeeper | Create Unit file
    template: src=zookeeper.service.j2 dest=/lib/systemd/system/zookeeper.service mode=644
    notify:
      - reload systemctl

  - name: zookeeper | Start zookeeper.service
    service: name=zookeeper.service state=started enabled=yes

  - name: create zookeeper config for replicas and sharding
    template: 
      src:   cluster.xml.j2
      dest:  /etc/clickhouse-server/cluster.xml
      mode:  644 
      owner: clickhouse
      group: clickhouse
  
####  #- name: Create ClickHouse databases
####  #  command: clickhouse-client --query="CREATE DATABASE {{ item }};"
####  #  loop: "{{ clickhouse_databases | default([]) }}"
####  #  register: command_result
####  #  changed_when: command_result.rc == 0
####  #  failed_when: command_result.rc != 0 and command_result.rc != 82
####  
####  - name: Create ClickHouse destination table
####    changed_when: no
####    command: >
####      clickhouse-client --query
####      "CREATE TABLE IF NOT EXISTS default.local_posts (
####         id Int64,
####         title String,
####         description String,
####         content String,
####         user_id Int64,
####         date Date
####      )
####      ENGINE = MergeTree()
####      PARTITION BY toYYYYMM(date)
####      ORDER BY id;"
####    retries: 3
####    delay: 5
####  
####  - name: Add entry to default.local_posts
####    changed_when: no
####    command: >
####      clickhouse-client --query
####      "INSERT INTO default.local_posts VALUES
####          (1,'title1','description1','content1',1,2020-10-10),
####          (2,'title2','description2','content2',2,2020-10-10);
####      "
####  
####  - name: Create CSV file /var/lib/clickhouse/user_files/users.csv
####    changed_when: no
####    shell: |
####      cat << EOF > /var/lib/clickhouse/user_files/users.csv 
####      1,marat@mail.ru
####      2,denis@mail.ru
####      EOF
####  
####  
####  #- name: Create CSV file /var/lib/clickhouse/user_files/users.csv
####  #  changed_when: no
####  #  shell: |
####  #    cat << EOF > /etc/clickhouse-server/csv_dictionary.xml
####  #    <?xml version="1.0"?>
####  #    <yandex>
####  #    <dictionary>
####  #        <name>local_users_dict</name>
####  #        <source>
####  #           <file>
####  #              <path>/var/lib/clickhouse/user_files/users.csv</path>
####  #              <format>CSV</format>
####  #           </file>
####  #        </source>
####  #        <layout>
####  #           <flat />
####  #        </layout>
####  #        <structure>
####  #           <id>
####  #             <name>user_id</name>
####  #           </id>
####  #           <attribute>
####  #              <name>email</name>
####  #              <type>String</type>
####  #              <null_value>Null</null_value>
####  #           </attribute>
####  #        </structure>
####  #        <lifetime>10</lifetime>
####  #    </dictionary>
####  #    </yandex>
####  #    EOF
####  
####  - name: Create CSV file /var/lib/clickhouse/user_files/users.csv
####    changed_when: no
####    shell: |
####      chown clickhouse:clickhouse /var/lib/clickhouse/user_files/users.csv
####  
####  - name: sleep for 10 seconds and continue with play
####    wait_for:
####      timeout: 10
####  
####  - name: Create Dictionary local_users_dict which will use CSV file /var/lib/clickhouse/user_files/users.csv
####    changed_when: no
####    command: >
####      clickhouse-client --query
####      "
####      CREATE DICTIONARY local_users_dict (
####          user_id UInt64 DEFAULT 0,
####          email String
####      ) 
####      PRIMARY KEY user_id
####      SOURCE(FILE(
####          path '/var/lib/clickhouse/user_files/users.csv'
####          format 'CSV'
####      ))
####      LAYOUT(FLAT())
####      LIFETIME(10);
####      "
####  
####  
####  - name: Create SQL Query in order to load the Dictionary
####    changed_when: no
####    command: >
####      clickhouse-client --query
####      "
####      SELECT 
####          dictGetString('local_users_dict', 'email', toUInt64(user_id)) AS email_addr,
####          title,
####          description,
####          content
####      FROM local_posts;"
