---
- hosts: server1,server2,server3,server4
  become: true
  vars:
    doc_root: /vagrant/web
    server_name: "{{ ansible_eth1.ipv4.address }}"
    sys_packages: [ 'curl', 'vim', 'git', 'apt-transport-https', 'ca-certificates', 'dirmngr']
    php_packages: [ 'php7.0-curl', 'php7.0-cli' ]
    clickhouse_databases: ['db', 'db_restore']
  roles:
    - clickhouse

- hosts: server1,server2,server3
  become: true
  vars:
    clickhouse_databases: ['db', 'db_restore']
  roles:
    - zookeeper


- hosts: server1,server2,server3,server4
  become: true
  name: Configure ClickHouse to use cluster.xml file
    shell: >
      sed -i -n '1,/<remote_servers>/p;/<\/remote_servers>/,$p' /etc/clickhouse-server/config.xml
      sed -i '/<\/remote_servers>/d' /etc/clickhouse-server/config.xml
      sed -i  's|<remote_servers>|<remote_servers incl="clickhouse_remote_servers" />\n    <include_from>/etc/clickhouse-server/cluster.xml</include_from>|' /etc/clickhouse-server/config.xml
      sed -i  's|<!-- <listen_host>::</listen_host> -->|<listen_host>::</listen_host>|' /etc/clickhouse-server/config.xml
#     <zookeeper incl="zookeeper-servers" optional="true" /> 
#     <macros incl="macros" optional="true" /> 
      systemctl restart clickhouse-server
    register: command_result
    changed_when: command_result.rc == 0
    failed_when: command_result.rc != 0

#В кластере необходимо создать таблицу events_local реплицируемую в каждом шарде
#Таблицу можно сделать по примерам из 9ого или 11ого заданий - она должна содержать datetime поле, event_type - идентификатор события
- hosts: server1,server2,server3,server4
  become: true
  name: Create ClickHouse local table 'events_local'
    command: >
      clickhouse-client --query 
        "CREATE TABLE default.events_local on CLUSTER mycluster
         (
             id Int64,
             title String,
             description String,
             content String,
             event_type String,
             datetime DateTime
         )
         ENGINE = ReplicatedMergeTree('/clickhouse/{cluster}/tables/events_local', '{replica}') 
         PARTITION BY toYYYYMM(date)
         ORDER BY id;"
    register: command_result
    changed_when: command_result.rc == 0
    failed_when: command_result.rc != 0 and command_result.rc != 82
    retries: 3
    delay: 5

#Так же нужно создать таблицу events_distributed, которая будет смотреть на два шарда и реплики в них
#Таблицу можно сделать по примерам из 9ого или 11ого заданий - она должна содержать datetime поле, event_type - идентификатор события
- hosts: server1
  become: true
  vars:
    clickhouse_table_name: 'events_local'
  name: Create ClickHouse local table 'events_local'
    command: >
      clickhouse-client --query 
      "CREATE TABLE default.events_distributed on 'mycluster'
      (
           id Int64,
           title String,
           description String,
           content String,
           event_type String,
           datetime DateTime
      )
      ENGINE = Distributed('{cluster}', 'default', 'events_local', rand());"
    register: command_result
    changed_when: command_result.rc == 0
    failed_when: command_result.rc != 0 and command_result.rc != 82
    retries: 3
    delay: 5




####- hosts: server1,server3
####  name: insert data into local_data
####  changed_when: no
####    command: >
####      clickhouse-client --query    
####      "{{ item }}"
####    loop:
####      - "INSERT INTO default.events_local (*) VALUES (1, 'title1', 'description1', 'content1', '2020-10-10')"
####      - "INSERT INTO default.events_local (*) VALUES (2, 'title2', 'description2', 'content2', '2020-10-10')"
####      - "INSERT INTO default.events_local (*) VALUES (3, 'title3', 'description3', 'content3', '2020-10-10')"
####      - "INSERT INTO default.events_local (*) VALUES (4, 'title4', 'description4', 'content4', '2020-10-10')"
####      - "INSERT INTO default.events_local (*) VALUES (5, 'title5', 'description5', 'content5', '2020-10-10')"
####    register: command_result
####    changed_when: command_result.rc == 0
####    failed_when: command_result.rc != 0 and command_result.rc != 82




####  name: Create ClickHouse destination table
####  changed_when: no
####  command: >
####    clickhouse-client --query
####    "CREATE TABLE IF NOT EXISTS default.local_posts (
####       id Int64,
####       title String,
####       description String,
####       content String,
####       user_id Int64,
####       date Date
####    )
####    ENGINE = MergeTree()
####    PARTITION BY toYYYYMM(date)
####    ORDER BY id;"
####  retries: 3
####  delay: 5

