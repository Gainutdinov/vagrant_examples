Задание:
Подготовка окружения
1. Создайте виртуальные машины ВМ1,2,3 kafka-broker1,2,3 следующей конфигурации:
○ 1 CPU
○ 1G memory
Обновите систему на ВМ1,2,3
На ВМ1,2,3 kafka-broker1,2,3, а также на всех нодах кластера Zookeeper добавьте в файл /etc/hosts следующие записи:

```
<Kafka_ВМ1_ip_адрес> kafka-broker1
<Kafka_ВМ2_ip_адрес> kafka-broker2
<Kafka_ВМ3_ip_адрес> kafka-broker3
<Zookeeper_ВМ1_ip_адрес> zookeeper1
<Zookeeper_ВМ2_ip_адрес> zookeeper2
<Zookeeper_ВМ3_ip_адрес> zookeeper3
```

2. Установите JRE.

```
sudo apt update
sudo apt install openjdk-11-jre-headless -y
```

Конфигурация Kafka-кластера
3. Скачайте последнюю доступную версию Kafka. Распакуйте архив в директорию /usr/local/kafka.

```
sudo -i
adduser --disabled-password --shell /bin/bash --gecos "kafka" kafka
adduser kafka sudo
echo 'kafka ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers.d/vagrant
su -l kafka
mkdir ~/Downloads
curl "https://dlcdn.apache.org/kafka/3.0.1/kafka_2.12-3.0.1.tgz" -o ~/Downloads/kafka.tgz
mkdir ~/kafka && cd ~/kafka
tar -xvzf ~/Downloads/kafka.tgz --strip 1
```

4. Создайте директорию /var/lib/kafka для хранения оперативной информации.

```
sudo mkdir -p /var/lib/kafka
sudo chown kafka:kafka  /home/kafka/kafka/config/server.properties
```

5. Отредактируйте конфигурационный файл Kafka так, чтобы он содержал:
○ В директиве broker.id — актуальный номер брокера.
○ В директиве log.dirs — путь /var/lib/kafka.
○ В директиве zookeeper.connect — перечень всех нод кластера Zookeeper.

```
cat << EOF > /home/kafka/kafka/config/server.properties
broker.id=${HOSTNAME:6}
log.dirs=/var/lib/kafka
advertised.host.name=
log.dirs=/tmp/kafka-logs
zookeeper.connect=zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
zookeeper.connection.timeout.ms=6000
EOF
sudo chown kafka:kafka  /home/kafka/kafka/config/server.properties
```

6. Создайте unit-файл /etc/systemd/system/kafka.service следующего содержания:

```
cat << EOF > /etc/systemd/system/kafka.service
[Service]
Type=simple
ExecStart=/bin/sh -c '/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties > /var/lib/kafka/kafka.log 2>&1'
ExecStop=/usr/local/kafka/bin/kafka-server-stop.sh
Restart=on-abnormal
[Install]
WantedBy=multi-user.target
EOF

```

Включите и стартуйте сервис kafka. Убедитесь, что он работает.

```
sudo systemctl status kafka.service
```

7. На кластере Zookeeper убедитесь, что все ноды кластера Kafka прошли регистрацию.

```
sudo systemctl status zookeeper.service
```

8. На ВМ1 kafka-broker1 создайте topic со следующими параметрами:
○ Имя топика — my-replicated-topic.
○ Bootstrap сервер broker1, порт 9092.
○ Репликационный фактор — 3.
○ Количество партиций — 1.
Проверьте, что созданный топик имеет 3 реплики. Какая из них является лидером?

```
su - kafka
~/kafka/bin/kafka-topics.sh --create --bootstrap-server broker1:9092 --replication-factor 3 --partitions 1 --topic my-replicated-topic
~/kafka/bin/kafka-topics.sh --list --bootstrap-server broker1:9092
```

9. Модифицируйте Python-скрипты send.py и receive.py для работы с кластером Kafka.

```
sudo apt update
sudo apt install python3-pip -y
sudo pip3 install kafka-python

cat << EOF >> ~/send.py
#!/usr/bin/python3
from kafka import KafkaProducer
broker = 'broker1:9092'
topic = 'my-replicated-topic'
message = 'message2'
producer = KafkaProducer(bootstrap_servers=[broker])
producer.send(topic, message.encode('utf-8'))
producer.flush()
EOF
chmod 777 ~/send.py

cat << EOF >> ~/receive.py
#!/usr/bin/python3
from kafka import KafkaConsumer
broker = 'broker1:9092'
topic = 'my-replicated-topic'
consumer = KafkaConsumer(topic, bootstrap_servers=[broker])
for msg in consumer:
  print (msg)
EOF
chmod 777 ~/receive.py
```

10. Используя Python-скрипты send.py и receive.py, отправьте тестовое сообщение в топик my-replicated-topic. Примите тестовое сообщение.

Сценарий потери брокера с лидер-репликой

11. Выключите ВМ брокера, содержащего лидер-реплику топика my-replicated-topic.
12. Проверьте, изменилась ли информация о брокерах в Zookeeper.

```
journalctl -u zookeeper.service -xe
```

13. Убедитесь, что для топика была выбрана новая лидер-реплика. Какие реплики топика my-replicated-topic находятся в состоянии in-sync?
14. Используя Python-скрипты send.py и receive.py, повторите отправку и прием тестового сообщения.
15. Включите ранее выключенную ВМ.
16. Стартуйте сервис kafka. Убедитесь, что он работает.
17. Проверьте, изменилась ли информация о брокерах в Zookeeper.
18. Убедитесь, что все три реплики топика my-replicated-topic находятся в состоянии "in-sync".


