- hosts: all
  become: yes
  gather_facts: yes
  vars:
    max_clients: 200
    publisher_IP: "{{ hostvars['publisher'].ansible_host }}"
    subscriber_IP:  "{{ hostvars['subscriber'].ansible_host }}"
  tasks:
  - name: Apply tags to tasks within included file
    include_tasks:
      file: include/ssh_append.yml


  - name: Install Postgres CentOS 7
    block:
      - name: Disable SELinux
        selinux:
          state: disabled
      - name: install postgres & pgbench
        shell: |
          yum -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
          yum -y install postgresql13 postgresql13-server postgresql13-contrib vim
          cp /usr/pgsql-13/bin/pgbench /usr/bin/
          chmod -R 777 /opt/
          /usr/pgsql-13/bin/postgresql-13-setup initdb
          systemctl start postgresql-13
          touch /var/log/postgresql.log
          chmod a-wr,u+wr /var/log/postgresql.log
          chown postgres:postgres /var/log/postgresql.log

  - name: add superuser root
    become_user: postgres
    shell: |
      createuser --superuser root
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: create pgbench DB and initialize it
    become_user: postgres
    shell: |
      psql --dbname=postgres --command 'CREATE DATABASE pgbench;' ;
      pgbench --initialize --scale=100 pgbench
    args:
      executable: /usr/bin/bash
    ignore_errors: yes


  - name: Get basic productivity - test #1
    ansible.builtin.debug:
      msg: 
        - "* Выполнить pgbench, чтобы узнать базовую - дефолтную производительность системы. ``` pgbench -t 1000 -c 15 -f /opt/task11.sql -n pgbench ```"


  - name: Get basic productivity - test #1
    become_user: postgres
    shell: |
      pgbench -t 1000 -c 15 -f /opt/task11.sql -n pgbench > /opt/result_1.txt
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: Prepare settings for test #2
    become_user: postgres
    shell: |
      psql -U postgres << EOF
      ALTER SYSTEM RESET ALL;
      ALTER SYSTEM SET fsync to off;
      EOF
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: restart service postgresql.service
    systemd:
      state: restarted
      daemon_reload: yes
      name: postgresql-13.service

  - name: Prepare - test #2
    ansible.builtin.debug:
      msg: 
        - " #10. Выполните повторно pgbench -t 1000 -c 15 -f /opt/task11.sql -n pgbench."
        - " #11. Сохраните результат в /opt/result_2.txt."

  - name: Run test #2
    become_user: postgres
    shell: |
      pgbench -t 1000 -c 15 -f /opt/task11.sql -n pgbench > /opt/result_2.txt
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: Prepare settings for test #3
    become_user: postgres
    shell: |
      psql -U postgres << EOF
      ALTER SYSTEM RESET ALL;
      ALTER SYSTEM SET synchronous_commit to off;
      ALTER SYSTEM SET commit_delay to 100000;
      EOF
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: restart service postgresql.service
    systemd:
      state: restarted
      daemon_reload: yes
      name: postgresql-13.service

  - name: Run test #3
    become_user: postgres
    shell: |
      pgbench -t 1000 -c 15 -f /opt/task11.sql -n pgbench > /opt/result_3.txt
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: Prepare and run test #4
    block:
      - name: Disable SELinux
        selinux:
          state: disabled
      - name: prepare test #4
        ansible.builtin.lineinfile:
          path: "/var/lib/pgsql/13/data/postgresql.conf"
          regexp: "{{ item.regexp }}"
          line: "{{ item.line }}"
        loop:
          - { regexp: "^max_connections = 100",   line: "max_connections = 32"                               }
          - { regexp: "^shared_buffers = 128MB",  line: "shared_buffers = 256MB"                             }
          - { regexp: "^#work_mem = 4MB",         line: "work_mem = 16MB                         # min 64kB" }
      - name: restart service postgresql.service
        systemd:
          state: restarted
          daemon_reload: yes
          name: postgresql-13.service

  - name: last test run manually the 4th test
    ansible.builtin.debug:
      msg: 
        - "* Выполнить pgbench, чтобы узнать базовую - дефолтную производительность системы. ``` pgbench -t 1000 -c 15 -f /opt/task11.sql -n pgbench ```"
        - "Проанализируйте запрос с сортировкой и посмотрите, производится ли сортировка в памяти или на диске:"
        - "EXPLAIN ANALYZE SELECT n FROM generate_series(1,5) as foo(n) order by n;"
        - "Задать параметр random_page_cost с дефолтным значением."
        - "Если уверены, что все выполнили правильно, оправляйте задание на проверку."

#-bash-4.2$ psql --dbname=postgres --command 'EXPLAIN ANALYZE SELECT n FROM generate_series(1,5) as foo(n) order by n;' ;
#                                                       QUERY PLAN
#------------------------------------------------------------------------------------------------------------------------
# Sort  (cost=0.11..0.12 rows=5 width=4) (actual time=0.085..0.092 rows=5 loops=1)
#   Sort Key: n
#   Sort Method: quicksort  Memory: 25kB
#   ->  Function Scan on generate_series foo  (cost=0.00..0.05 rows=5 width=4) (actual time=0.013..0.018 rows=5 loops=1)
# Planning Time: 0.672 ms
# Execution Time: 0.154 ms
#(6 rows)
#
#
  - name: change to random_page_cost
    ansible.builtin.lineinfile:
      path: "/var/lib/pgsql/13/data/postgresql.conf"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    loop:
      - { regexp: "^#random_page_cost = 4.0",   line: "random_page_cost = 4.0                 # same scale as above" }

  - name: restart service postgresql.service
    systemd:
      state: restarted
      daemon_reload: yes
      name: postgresql-13.service

#-bash-4.2$ psql --dbname=postgres --command 'EXPLAIN ANALYZE SELECT n FROM generate_series(1,5) as foo(n) order by n;' ;
#                                                       QUERY PLAN
#------------------------------------------------------------------------------------------------------------------------
# Sort  (cost=0.11..0.12 rows=5 width=4) (actual time=0.063..0.066 rows=5 loops=1)
#   Sort Key: n
#   Sort Method: quicksort  Memory: 25kB
#   ->  Function Scan on generate_series foo  (cost=0.00..0.05 rows=5 width=4) (actual time=0.013..0.015 rows=5 loops=1)
# Planning Time: 0.316 ms
# Execution Time: 0.126 ms
#(6 rows)
#
#-bash-4.2$
#
#
#
  - name: get result files from remote server
    ansible.builtin.fetch:
      src: "/opt/{{ item }}"
      dest: "files/{{ item }}"
      flat: yes
    loop:
      - "result_1.txt"
      - "result_2.txt"
      - "result_3.txt"
      - "task11.sql"

