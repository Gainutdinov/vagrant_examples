---

- hosts: server1
  become: true
  vars:
    - mysql_root_password: "Password1"
    - allow_remote_connections: true
    - mariadb_socket: /run/mysqld/mysqld.sock
  tasks:
  - name: Install powerDNS related packages
    apt:
      pkg: 
      - software-properties-common
      - bind9-utils
      - bind9utils
      - bind9-dnsutils
      - python3-pip
      state: present
      update_cache: yes

  - name: Make sure pymysql is present
    pip:
      name: pymysql
      state: present

  - name: Add an Apt signing key, uses whichever key is at the URL
    apt_key:
      url: https://mariadb.org/mariadb_release_signing_key.asc
      state: present

  - apt_repository:
      repo: deb [arch=amd64,arm64,ppc64el] http://mirrors.ukfast.co.uk/sites/mariadb/repo/10.5/ubuntu focal main
      state: present
      filename: mariadb-server
  
  - name: Install mariadb-server related packages
    apt:
      pkg: 
      - mariadb-server
      - pdns-server
      - pdns-backend-mysql
      state: present
      update_cache: yes

  - debug:
      msg: https://kifarunix.com/easily-install-and-setup-powerdns-on-ubuntu-20-04/

  - name: Check if mysql root password was not set
    shell: >
      mysql -u root
      -h localhost
      -e "quit"
    changed_when: false
    ignore_errors: true
    register: check_passwd_root

  - name: Check if unix_socket plugin is enabled
    shell: >
      mysql -u root
      -h localhost
      -e "SELECT plugin from mysql.user WHERE user = 'root'"
    ignore_errors: true
    register: check_unix_socket_plugin
    changed_when: check_unix_socket_plugin.stdout is search('socket')
    when: check_passwd_root.rc == 0

  - name: Delete remote login connection
    shell: >
      mysql -u root
      -h localhost
      -e "delete from mysql.user where User='root' and Host NOT IN ('localhost', '127.0.0.1');"
    when:
      - allow_remote_connections
      - check_passwd_root.rc == 0


  - name: Create test database for sysbench
    shell: >
      mysql -u root
      -h localhost
      -e "CREATE DATABASE IF NOT EXISTS test"
    changed_when: false
    ignore_errors: true

  - name: Set MariaDB root password for 127.0.0.1, localhost
    mysql_user:
      name: root
      password: "{{ mysql_root_password }}"
      host: "{{ item }}"
      login_user: root
      #login_password: "{{ mysql_root_password }}"
      login_unix_socket: "{{ mariadb_socket }}"
      state: present
    with_items:
      - 127.0.0.1
      - localhost
#    when: check_passwd_root.rc == 0

  - name: Flush Priviliges
    command: mysql -u root -p{{ mysql_root_password }} -e "FLUSH PRIVILEGES"

  - name: Remove all anonymous user
    mysql_user:
      login_user: root
      login_password: "{{ mysql_root_password }}"
      name: 'ansible'
      host_all: yes
      state: absent
    notify: Flush Priviliges

  - name: Remove test database
    mysql_db:
      login_user: "root"
      login_password: "{{ mysql_root_password }}"
      db: "test"
      state: absent
    register: remove_test_db


  - name: start mariadb
    service:
      name: mariadb
      enabled: true
      state: started

  - name: CREATE database powerdns
    command: mysql -u root -p{{ mysql_root_password }} -e "CREATE DATABASE IF NOT EXISTS powerdns"

  - name: grant privileges
    command: mysql -u root -p{{ mysql_root_password }} -e "grant all on powerdns.* to pdnsadmin@localhost identified by 'Password1';"

  - name: Flush Priviliges
    command: mysql -u root -p{{ mysql_root_password }} -e "FLUSH PRIVILEGES"

  - name: create schema for powerdns database
    shell: mysql -u pdnsadmin -p{{ mysql_root_password }} -Dpowerdns < /usr/share/pdns-backend-mysql/schema/schema.mysql.sql 

  - name: Template a file to /etc/powerdns/pdns.d/pdns.local.gmysql.conf
    template:
      src: templates/pdns.local.gmysql.conf.j2
      dest: /etc/powerdns/pdns.d/pdns.local.gmysql.conf
      owner: root
      group: root
      mode: '0640'

  - name: Insert1
    command: mysql -u pdnsadmin -pPassword1 -Dpowerdns -e "INSERT INTO domains (name, type) values ('rebrainme.com', 'NATIVE');"

  - name: Insert2
    command: mysql -u pdnsadmin -pPassword1 -Dpowerdns -e "INSERT INTO powerdns.records (domain_id, name, content, type,ttl,prio) VALUES (1,'rebrainme.com','localhost admin.rebrainme.com 1 10380 3600 604800 3600','SOA',86400,NULL);"

  - name: Insert3
    command: mysql -u pdnsadmin -pPassword1 -Dpowerdns -e "INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'rebrainme.com','ns1.rebrainme.com','NS',86400,NULL);"

  - name: Insert4
    command: mysql -u pdnsadmin -pPassword1 -Dpowerdns -e "INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'ns1.rebrainme.com','139.59.151.64','A',120,NULL);"

  - name: Insert5
    command: mysql -u pdnsadmin -pPassword1 -Dpowerdns -e "INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'rebrainme.com','139.59.151.64','A',120,NULL);"

  - name: unlink resolv.conf
    command: unlink /etc/resolv.conf
    ignore_errors: yes

  - name: Template a file to /etc/resolv.conf
    template:
      src: templates/resolv.conf.j2
      dest: /etc/resolv.conf
      owner: root
      group: root
      mode: '0644'

  - name: stop systemd-resolved
    service:
      name: systemd-resolved
      state: stopped
    ignore_errors: yes

  - name: Restart pdns
    service:
      name: pdns
      state: restarted


####  - name: Template a file to /etc/bind/named.conf.local
####    template:
####      src: templates/rebrainme.com.conf
####      dest: /etc/bind/rebrainme.com.conf
####      owner: root
####      group: root
####      mode: '0644'
####
####  - debug:
####      msg: dig rebrainme.com @{{ ansible_host }}
