- hosts: all
  become: yes
  gather_facts: yes
  vars:
    max_clients: 200
  tasks:
  - name: Apply tags to tasks within included file
    include_tasks:
      file: include/ssh_append.yml
  - name: Install Postgres Ubuntu 20.04
    block:
      - name: install 1_ubuntu
        ansible.builtin.apt:
          pkg:
          - wget 
          - ca-certificates
          - vim-nox
          update_cache: yes
          state: latest
      - name: 2_ubuntu
        ansible.builtin.apt_key:
          url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
          state: present
      - name: 3_ubuntu
        ansible.builtin.apt_repository:
          repo: deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main
          filename: pgdg
          state: present
      - name: install 4_ubuntu
        become: yes
        ansible.builtin.apt:
          pkg:
          - postgresql-13
          - postgresql-client-13
          update_cache: yes
          state: latest
  
  - name: add superuser root
    become_user: postgres
    shell: |
      createuser --superuser root
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: list databases
    shell: |
      psql -U root --dbname=postgres  --list
      psql -U root --dbname=postgres --command 'CREATE DATABASE rebrain_courses_db;'
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: create user plus add privileges
    shell: |
      psql -U root --dbname=postgres --command 'CREATE ROLE rebrain_courses_db WITH LOGIN;' 
      psql -U root --dbname=postgres --command 'ALTER DATABASE rebrain_courses_db OWNER TO root;'
      psql -U root --dbname=postgres --command 'GRANT ALL PRIVILEGES ON DATABASE rebrain_courses_db TO rebrain_admin;'
      psql -U root --dbname=postgres --command 'GRANT pg_write_server_files TO rebrain_admin;' 
      psql -U root --dbname=postgres --command 'GRANT pg_write_server_files TO root;' 
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: add user rebrain_admin
    become_user: postgres
    shell: |
      createuser --superuser rebrain_admin
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: set password for rebrain_admin
    become_user: postgres
    shell: |
      psql -U postgres --dbname=postgres --command "ALTER USER rebrain_admin WITH PASSWORD 'password';"
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: create user plus add privileges
    shell: |
      psql -U root --dbname=postgres --command 'GRANT ALL PRIVILEGES ON DATABASE rebrain_courses_db TO rebrain_admin;'
      psql -U root --dbname=postgres --command 'GRANT pg_write_server_files TO rebrain_admin;' 
      psql -U root --dbname=postgres --command 'GRANT pg_write_server_files TO root;' 
    args:
      executable: /usr/bin/bash
    ignore_errors: yes


  - name: Copy file with owner and permissions
    ansible.builtin.copy:
      src: files/rebrain_courses_db.sql.bqp
      dest: /tmp/rebrain_courses_db.sql.bqp
      owner: root
      group: root
      mode: '0644'

  - name: Восстановите данные из бэкапа базы данных из предыдущего задания командой
    shell: |
      psql -U root -d rebrain_courses_db -f /tmp/rebrain_courses_db.sql.bqp
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: Выдайте все права пользователю rebrain_admin на базу данных rebrain_courses_db
    shell: |
      psql -U root --dbname=postgres --command 'GRANT ALL PRIVILEGES ON DATABASE rebrain_courses_db TO rebrain_admin;'
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: Создайте роль backup
    shell: |
      psql -U root --dbname=postgres --command 'CREATE ROLE backup;'
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: Create table blog and insert data into it
    shell: |
      PGPASSWORD=password psql -U rebrain_admin -h 127.0.0.1 -p 5432 --dbname=rebrain_courses_db --command '
        CREATE TABLE blog(
          id SERIAL PRIMARY KEY NOT NULL,     -- Primary Key
          user_id INT NOT NULL,               -- Foreign Key to table users 
          blog_text TEXT NOT NULL,
          CONSTRAINT fk_user_id
            FOREIGN KEY (user_id) 
              REFERENCES users(user_id)
          );'
      PGPASSWORD=password psql -U rebrain_admin -h 127.0.0.1 -p 5432 --dbname=rebrain_courses_db --command '
        ALTER TABLE rebrain_courses_db.blog OWNER TO rebrain_admin;
        '
      PGPASSWORD=password psql -U rebrain_admin -h 127.0.0.1 -p 5432 --dbname=rebrain_courses_db --command "
        INSERT INTO blog(user_id,blog_text)
        VALUES (1,'We are studying at the REBRAIN PostgreSQL Workshop');
        "
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

#Подключитесь пользователем root к базе данных rebrain_courses_db.
#С помощью команды GRANT USAGE выдайте права на использование схемы public пользователю rebrain_admin. Затем, с помощью команды ALTER DEFAULT PRIVILEGES выдайте для роли backup права SELECT на вновь создаваемые таблицы пользователем rebrain_admin в схеме public.
  - name: GRANT USAGE for schema public
    shell: |
      psql -U root --dbname=rebrain_courses_db --command 'GRANT USAGE ON SCHEMA public TO rebrain_admin;'
      #psql -U root --dbname=rebrain_courses_db --command 'ALTER DEFAULT PRIVILEGES FOR ROLE backup IN SCHEMA public GRANT SELECT ON TABLES TO rebrain_admin;'
      psql -U root --dbname=rebrain_courses_db --command 'ALTER DEFAULT PRIVILEGES FOR ROLE rebrain_admin IN SCHEMA public GRANT SELECT ON TABLES TO backup;'
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

#PGPASSWORD=password  psql -U rebrain_admin -h 127.0.0.1 -p 5432 rebrain_courses_db --command 
#Снова подключитесь пользователем root к базе данных rebrain_courses_db.
#С помощью команды GRANT USAGE выдайте права на использование схемы public пользователю rebrain_group_select_access
#Выдайте права для rebrain_group_select_access только на SELECT из всех таблиц в схеме public.
  - name: commands for role rebrain_group_select_access
    shell: |
      psql -U root --dbname=rebrain_courses_db --command 'CREATE ROLE rebrain_group_select_access;'
      psql -U root --dbname=rebrain_courses_db --command 'ALTER DEFAULT PRIVILEGES FOR ROLE rebrain_group_select_access IN SCHEMA public GRANT SELECT ON TABLES TO rebrain_group_select_access;'
      psql -U root --dbname=rebrain_courses_db --command 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO rebrain_group_select_access;'
    args:
      executable: /usr/bin/bash
    ignore_errors: yes
#
#Создайте роль rebrain_user.
#Выдайте для роли rebrain_user права роли rebrain_group_select_access.
#Убедитесь, что роль rebrain_user может получать все данные из любых таблиц базы данных rebrain_courses_db в схеме public.
#
  - name: commands for role rebrain_user
    shell: |
      psql -U root --dbname=rebrain_courses_db --command 'CREATE ROLE rebrain_user;'
      psql -U root --dbname=rebrain_courses_db --command 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO rebrain_user;'
      psql -U root --dbname=rebrain_courses_db --command 'ALTER DEFAULT PRIVILEGES FOR ROLE backup IN SCHEMA public GRANT SELECT ON TABLES TO rebrain_group_select_access;'
    args:
      executable: /usr/bin/bash
    ignore_errors: yes
    #
    #
    #Создайте роль rebrain_portal.
    #Убедитесь, что вы подключены к базе данных rebrain_courses_db. Для базы данных rebrain_courses_db создайте новую схему rebrain_portal.
    #С помощью команды GRANT USAGE выдайте права на использование схемы rebrain_portal пользователю rebrain_portal.
    #Выдайте все права на схему rebrain_portal для роли rebrain_portal.
  - name: commands for role rebrain_portal and rebrain_portal schema
    shell: |
      psql -U root --dbname=rebrain_courses_db --command 'CREATE ROLE rebrain_portal;'
      psql -U root --dbname rebrain_courses_db --command 'CREATE SCHEMA rebrain_portal;'
      psql -U root --dbname rebrain_courses_db --command 'GRANT USAGE ON SCHEMA rebrain_portal TO rebrain_portal;'
      psql -U root --dbname rebrain_courses_db --command 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA rebrain_portal TO rebrain_portal;'
    args:
      executable: /usr/bin/bash
    ignore_errors: yes

  - name: backup rebrain_courses_db DB
    shell: |
      pg_dump -U root rebrain_courses_db > /tmp/rebrain_courses_db_task04.sql.bqp
    args:
      executable: /usr/bin/bash
    ignore_errors: yes


