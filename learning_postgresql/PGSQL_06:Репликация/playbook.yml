- hosts: all
  become: yes
  gather_facts: yes
  vars:
    max_clients: 200
    master_IP: "{{ hostvars['master'].ansible_host }}"
    slave_IP:  "{{ hostvars['slave'].ansible_host }}"
  tasks:
  - name: Apply tags to tasks within included file
    include_tasks:
      file: include/ssh_append.yml
  - name: Install Postgres CentOS 7
    block:
      - name: Disable SELinux
        selinux:
          state: disabled
      - name: install postgres
        shell: |
          yum -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
          yum -y install postgresql13 postgresql13-server vim
          /usr/pgsql-13/bin/postgresql-13-setup initdb
          systemctl start postgresql-13
          touch /var/log/postgresql.log
          chmod a-r,u+r /var/log/postgresql.log
          chown postgres:postgres /var/log/postgresql.log
#      - name: 2_ubuntu
#        ansible.builtin.apt_key:
#          url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
#          state: present
#      - name: 3_ubuntu
#        ansible.builtin.apt_repository:
#          repo: deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main
#          filename: pgdg
#          state: present
#      - name: install 4_ubuntu
#        become: yes
#        ansible.builtin.apt:
#          pkg:
#
#          - postgresql-13
#          - postgresql-client-13
#          - postgresql-contrib-13
#          update_cache: yes
#          state: latest

#Задать hostname серверов master и slave соответственно;
  - name: add hosts file entry
    lineinfile:
      path: "/etc/hosts"
      line:  "{{ item }}"
      state: present
    loop:
       - "{{master_IP}} master"
       - "{{slave_IP}}  slave"

#Разрешить безусловную аутентификацию клиентов в файле pg_hba.conf для пользователя репликации (postgres) с подключением для любых адресов (0.0.0.0/0);

  - name: add entry for pg_hba.conf
    lineinfile:
      path: "/var/lib/pgsql/13/data/pg_hba.conf"
      line:  "{{ item }}"
      state: present
    loop:
      - "### slavedb"
      - "### masterdb"
      - "host    replication     postgres        0.0.0.0/0        trust"

#Вынести логи (master, slave) в файл postgresql.log по пути /var/log/;
#Сконфигурировать на slave postgresql.auto.conf с указанием мастер ноды (с этим Вам поможет pg_basebackup);
  - name: allow all interfaces configure postgresql.conf
    ansible.builtin.lineinfile:
      path: "/var/lib/pgsql/13/data/postgresql.conf"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    loop:
      - { regexp: "^#listen_addresses = 'localhost'", line: "listen_addresses = '*'          # what IP address(es) to listen on;"}
      - { regexp: "^log_filename = 'postgresql-%a.log'", line: "log_filename = 'postgresql.log'          # log file name pattern,"}
              
  - name: install postgres
    shell: |
      systemctl restart postgresql-13

  - name: use pg_basebackup
    become: yes
    become_user: postgres
    shell: |
      pg_basebackup -h master -U postgres -p 5432 -D /var/lib/pgsql/13/backups/ -Fp -Xs -P -R
    when: inventory_hostname == 'slave'

  - name: stop postgresql
    shell: |
      systemctl stop postgresql-13
      mv /var/lib/pgsql/13/data /var/lib/pgsql/13/data_orig
      mv /var/lib/pgsql/13/backups /var/lib/pgsql/13/data
    when: inventory_hostname == 'slave'

  - name: start postgres on slave
    shell: |
      systemctl start postgresql-13
    when: inventory_hostname == 'slave'

  - name: restore data on master server 
    become: yes
    become_user: postgres
    shell: |
      psql --username postgres -f /opt/schema.sql
      psql --username postgres -f /opt/data.sql
    when: inventory_hostname == 'master'

#Tips to check results
#Check this on both hosts 
#-bash-4.2$ psql
#postgres=# SET ROLE car_portal_app ;
#postgres=> \c car_portal
#car_portal=# \dt+ car_portal_app.*;

