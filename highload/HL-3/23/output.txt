Задание:
1. Выполните вход в учетную запись AWS используя выданный AWS логин $LOGIN
2. Запустите экземпляр EC2 из образа Amazon Linux AMI 2018.03.0 (HVM). Выберите тип VM t2.micro.
3. После инициализации VM подключитесь к ней по SSH. Выполните настройку:
○ Установите Node.js, php74 + mbstring module, composer

```
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
. ~/.nvm/nvm.sh
nvm install --lts
node -e "console.log('Running Node.js ' + process.version)"

sudo amazon-linux-extras enable php7.4
sudo yum clean metadata
sudo yum install php php-{pear,cgi,common,curl,mbstring,gd,mysqlnd,gettext,bcmath,json,xml,fpm,intl,zip,imap}
sudo amazon-linux-extras enable php7.4

cd ~
sudo curl -sS https://getcomposer.org/installer | sudo php
sudo mv composer.phar /usr/local/bin/composer
sudo ln -s /usr/local/bin/composer /usr/bin/composer
sudo composer install
```

○ С помощью npm установите пакет serverless

```
npm install -g serverless --ignore-scripts spawn-sync
```

○ Создайте директорию project1. Внутри директории через composer установите пакет bref/bref

```
mkdir project1
cd ./project1
composer require bref/bref
```

○ Выполните инициализацию проекта vendor/bin/bref init. Тип Lambda PHP function. Ознакомьтесь со сгенерированными serverless.yml и index.php

```
./vendor/bin/bref init #Event-driven function
[root@ip-172-31-87-148 project1]# cat ./serverless.yml
service: app

provider:
    name: aws
    region: us-east-1
    runtime: provided.al2

plugins:
    - ./vendor/bref/bref

functions:
    hello:
        handler: index.php
        description: ''
        layers:
            - ${bref:layer.php-74}

# Exclude files from deployment
package:
    patterns:
        - '!tests/**'
[root@ip-172-31-87-148 project1]# cat ./index.php
<?php declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

return function ($event) {
    return 'Hello ' . ($event['name'] ?? 'world');
};
[root@ip-172-31-87-148 project1]#

```

○ В файле serverless.yml установите название сервиса $LOGIN-app

```
service: mgainutdinov-app

provider:
    name: aws
    region: us-east-1
    runtime: provided.al2

plugins:
    - ./vendor/bref/bref

functions:
    hello:
        handler: index.php
        description: ''
        layers:
            - ${bref:layer.php-74}

# Exclude files from deployment
package:
    patterns:
        - '!tests/**'
```

○ Настройте aws CLI для авторизации с вашими учетными данными

```
aws configure
```

4. Выполните деплой приложения с помощью serverless. Затем для проверки выполните serverless info, результат отправьте в ответе к заданию.

```
serverless deploy
[root@ip-172-31-87-148 project1]# serverless deploy
Deploying mgainutdinov-app to stage dev (us-east-1)

✔ Service deployed to stack mgainutdinov-app-dev (99s)

functions:
  hello: mgainutdinov-app-dev-hello (966 kB)
[root@ip-172-31-87-148 project1]#
```

5. Откройте Lambda service в консоли AWS. Откройте созданную функцию. Создате тест с содержимым:

```
{
"name": "$LOGIN"
}
```

Запустите тест. Убедитесь, что функция работает корректно. 

```
1.png
```

6. Выполните тестирование с помощью serverless invoke из консоли. В качетве входных данных передайте JSON из предыдущего пункта. Команду и результат отправьте в ответе к заданию. 

```
START RequestId: 9c414f03-1bd5-4c21-b1c5-7f639c439ecf Version: $LATEST
END RequestId: 9c414f03-1bd5-4c21-b1c5-7f639c439ecf
REPORT RequestId: 9c414f03-1bd5-4c21-b1c5-7f639c439ecf	Duration: 16.13 ms	Billed Duration: 226 ms	Memory Size: 1024 MB	Max Memory Used: 44 MB	Init Duration: 209.79 ms	
```

7. Выполните команды logs, metrics, которые предоставляет пакет serverless. Ознакомьтесь с содержимым. 

```
[root@ip-172-31-87-148 project1]# serverless logs --function hello
START
END Duration: 16.13 ms (init: 209.79 ms) Memory Used: 44 MB
[root@ip-172-31-87-148 project1]#
[root@ip-172-31-87-148 project1]# serverless metrics
Service wide metrics
June 19, 2022 12:44 PM - June 20, 2022 12:44 PM

invocations: 1
throttles: 0
errors: 0
duration (avg.): 225.91ms
[root@ip-172-31-87-148 project1]#
```

8. Оптимизируйте объем выделенной для функции памяти.
● Измените значение минимально возможное. Выполните повторное тестирование функции. Как поменялось время выполнения?
● Экспериментальным путем остановите достаточный объем ОЗУ, который необходимо выделить функции, чтобы время её выполнения не превышало 100 мс.
● Выполните команду logs, которую предоставляет пакет serverless. 
● В ответ к заданию приложите лог 3-х последних транзакций с оптимизированным объемом ОЗУ.

```
Memory: 160MB
---
[root@ip-172-31-87-148 project1]# serverless logs --function hello
START
END Duration: 26.95 ms (init: 191.06 ms) Memory Used: 44 MB
START
END Duration: 64.77 ms (init: 207.05 ms) Memory Used: 44 MB
START
END Duration: 170.32 ms (init: 192.41 ms) Memory Used: 44 MB
START
END Duration: 137.67 ms Memory Used: 44 MB
START
END Duration: 117.10 ms (init: 203.73 ms) Memory Used: 44 MB
START
END Duration: 87.88 ms Memory Used: 44 MB
START
END Duration: 86.40 ms Memory Used: 44 MB
START
END Duration: 91.10 ms Memory Used: 44 MB
START
END Duration: 85.72 ms Memory Used: 44 MB
START
END Duration: 107.25 ms Memory Used: 44 MB
START
END Duration: 95.26 ms Memory Used: 44 MB
START
END Duration: 85.96 ms Memory Used: 44 MB
START
END Duration: 96.20 ms Memory Used: 44 MB
START
END Duration: 93.93 ms Memory Used: 45 MB
[root@ip-172-31-87-148 project1]#


```

9. Удалите созданную функцию через serverless cli. Удалите созданный EC2 instance.
